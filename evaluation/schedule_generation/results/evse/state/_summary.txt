meta data:
{   'ann_output_processor': BatchProcessor([('dnml', slice(0, 1, None), BatchProcessor([]), tensor([0.]), tensor([3.6000e+08])), ('1', slice(1, 4, None), BatchProcessor([('clip', slice(0, 3, None), BatchProcessor([]), 0, 1)])), ('mode', slice(4, 101, None), BatchProcessor([]), tensor([    0.,   900.,  1800.,  2700.,  3600.,  4500.,  5400.,  6300.,  7200.,
         8100.,  9000.,  9900., 10800., 11700., 12600., 13500., 14400., 15300.,
        16200., 17100., 18000., 18900., 19800., 20700., 21600., 22500., 23400.,
        24300., 25200., 26100., 27000., 27900., 28800., 29700., 30600., 31500.,
        32400., 33300., 34200., 35100., 36000., 36900., 37800., 38700., 39600.,
        40500., 41400., 42300., 43200., 44100., 45000., 45900., 46800., 47700.,
        48600., 49500., 50400., 51300., 52200., 53100., 54000., 54900., 55800.,
        56700., 57600., 58500., 59400., 60300., 61200., 62100., 63000., 63900.,
        64800., 65700., 66600., 67500., 68400., 69300., 70200., 71100., 72000.,
        72900., 73800., 74700., 75600., 76500., 77400., 78300., 79200., 80100.,
        81000., 81900., 82800., 83700., 84600., 85500., 86400.])), ('mode', slice(101, 202, None), BatchProcessor([]), tensor([    -0.,   -220.,   -440.,   -660.,   -880.,  -1100.,  -1320.,  -1540.,
         -1760.,  -1980.,  -2200.,  -2420.,  -2640.,  -2860.,  -3080.,  -3300.,
         -3520.,  -3740.,  -3960.,  -4180.,  -4400.,  -4620.,  -4840.,  -5060.,
         -5280.,  -5500.,  -5720.,  -5940.,  -6160.,  -6380.,  -6600.,  -6820.,
         -7040.,  -7260.,  -7480.,  -7700.,  -7920.,  -8140.,  -8360.,  -8580.,
         -8800.,  -9020.,  -9240.,  -9460.,  -9680.,  -9900., -10120., -10340.,
        -10560., -10780., -11000., -11220., -11440., -11660., -11880., -12100.,
        -12320., -12540., -12760., -12980., -13200., -13420., -13640., -13860.,
        -14080., -14300., -14520., -14740., -14960., -15180., -15400., -15620.,
        -15840., -16060., -16280., -16500., -16720., -16940., -17160., -17380.,
        -17600., -17820., -18040., -18260., -18480., -18700., -18920., -19140.,
        -19360., -19580., -19800., -20020., -20240., -20460., -20680., -20900.,
        -21120., -21340., -21560., -21780., -22000.])), ('mode', slice(202, 203, None), BatchProcessor([]), tensor([0.]))]),
    'dt': 900,
    'input_processor': BatchProcessor([('nmlz', slice(0, 1, None), BatchProcessor([]), tensor([0.]), tensor([3.6000e+08])), ('1', slice(1, 4, None), BatchProcessor([])), ('oneh', slice(4, 5, None), BatchProcessor([]), tensor([    0.,   900.,  1800.,  2700.,  3600.,  4500.,  5400.,  6300.,  7200.,
         8100.,  9000.,  9900., 10800., 11700., 12600., 13500., 14400., 15300.,
        16200., 17100., 18000., 18900., 19800., 20700., 21600., 22500., 23400.,
        24300., 25200., 26100., 27000., 27900., 28800., 29700., 30600., 31500.,
        32400., 33300., 34200., 35100., 36000., 36900., 37800., 38700., 39600.,
        40500., 41400., 42300., 43200., 44100., 45000., 45900., 46800., 47700.,
        48600., 49500., 50400., 51300., 52200., 53100., 54000., 54900., 55800.,
        56700., 57600., 58500., 59400., 60300., 61200., 62100., 63000., 63900.,
        64800., 65700., 66600., 67500., 68400., 69300., 70200., 71100., 72000.,
        72900., 73800., 74700., 75600., 76500., 77400., 78300., 79200., 80100.,
        81000., 81900., 82800., 83700., 84600., 85500., 86400.])), ('oneh', slice(5, 6, None), BatchProcessor([]), tensor([    0.,   220.,   440.,   660.,   880.,  1100.,  1320.,  1540.,  1760.,
         1980.,  2200.,  2420.,  2640.,  2860.,  3080.,  3300.,  3520.,  3740.,
         3960.,  4180.,  4400.,  4620.,  4840.,  5060.,  5280.,  5500.,  5720.,
         5940.,  6160.,  6380.,  6600.,  6820.,  7040.,  7260.,  7480.,  7700.,
         7920.,  8140.,  8360.,  8580.,  8800.,  9020.,  9240.,  9460.,  9680.,
         9900., 10120., 10340., 10560., 10780., 11000., 11220., 11440., 11660.,
        11880., 12100., 12320., 12540., 12760., 12980., 13200., 13420., 13640.,
        13860., 14080., 14300., 14520., 14740., 14960., 15180., 15400., 15620.,
        15840., 16060., 16280., 16500., 16720., 16940., 17160., 17380., 17600.,
        17820., 18040., 18260., 18480., 18700., 18920., 19140., 19360., 19580.,
        19800., 20020., 20240., 20460., 20680., 20900., 21120., 21340., 21560.,
        21780., 22000.]))]),
    'model': EVSE(state=[1. 0. 1. 1. 0.], charging_efficiency=1.0, correct_infeasible=1, constraint_fuzziness=True),
    'output_action_feasibility': False,
    'output_interaction': True,
    'output_new_state': True,
    'output_processor': BatchProcessor([('nmlz', slice(0, 1, None), BatchProcessor([]), tensor([0.]), tensor([3.6000e+08])), ('1', slice(1, 4, None), BatchProcessor([])), ('didx', slice(4, 5, None), BatchProcessor([]), tensor([    0.,   900.,  1800.,  2700.,  3600.,  4500.,  5400.,  6300.,  7200.,
         8100.,  9000.,  9900., 10800., 11700., 12600., 13500., 14400., 15300.,
        16200., 17100., 18000., 18900., 19800., 20700., 21600., 22500., 23400.,
        24300., 25200., 26100., 27000., 27900., 28800., 29700., 30600., 31500.,
        32400., 33300., 34200., 35100., 36000., 36900., 37800., 38700., 39600.,
        40500., 41400., 42300., 43200., 44100., 45000., 45900., 46800., 47700.,
        48600., 49500., 50400., 51300., 52200., 53100., 54000., 54900., 55800.,
        56700., 57600., 58500., 59400., 60300., 61200., 62100., 63000., 63900.,
        64800., 65700., 66600., 67500., 68400., 69300., 70200., 71100., 72000.,
        72900., 73800., 74700., 75600., 76500., 77400., 78300., 79200., 80100.,
        81000., 81900., 82800., 83700., 84600., 85500., 86400.])), ('didx', slice(5, 6, None), BatchProcessor([]), tensor([    -0.,   -220.,   -440.,   -660.,   -880.,  -1100.,  -1320.,  -1540.,
         -1760.,  -1980.,  -2200.,  -2420.,  -2640.,  -2860.,  -3080.,  -3300.,
         -3520.,  -3740.,  -3960.,  -4180.,  -4400.,  -4620.,  -4840.,  -5060.,
         -5280.,  -5500.,  -5720.,  -5940.,  -6160.,  -6380.,  -6600.,  -6820.,
         -7040.,  -7260.,  -7480.,  -7700.,  -7920.,  -8140.,  -8360.,  -8580.,
         -8800.,  -9020.,  -9240.,  -9460.,  -9680.,  -9900., -10120., -10340.,
        -10560., -10780., -11000., -11220., -11440., -11660., -11880., -12100.,
        -12320., -12540., -12760., -12980., -13200., -13420., -13640., -13860.,
        -14080., -14300., -14520., -14740., -14960., -15180., -15400., -15620.,
        -15840., -16060., -16280., -16500., -16720., -16940., -17160., -17380.,
        -17600., -17820., -18040., -18260., -18480., -18700., -18920., -19140.,
        -19360., -19580., -19800., -20020., -20240., -20460., -20680., -20900.,
        -21120., -21340., -21560., -21780., -22000.])), ('didx', slice(6, 7, None), BatchProcessor([]), tensor([0.]))]),
    'sampling_parameters': {'infeasible_chance': 0.5}}
---
parameters:
{   'batch_count': 1000.0,
    'batch_norms': array([0, 0, 0, 0, 1, 0, 0, 0, 0, 1]),
    'batch_size': 3072,
    'betas': array([1. , 1. , 1. , 2. , 1. , 2. , 0.5, 0.5, 2. , 1. ]),
    'dropout': array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
    'early_stopping_callback': EarlyStoppingCallback(stopping_scores={}, improvement_window=100),
    'epoch_count': 1000,
    'hidden_layer_count': 7,
    'input_width': 202,
    'learning_rate': 0.001,
    'loss': MixedLoss([(MSELoss(), 1), (MSELoss(), 2), (MSELoss(), 1), (CrossEntropyLoss(), 97), (CrossEntropyLoss(), 101), (CrossEntropyLoss(), 1)],tensor([ 10.,  10., 100.,   1.,   1.,   1.], device='cuda:0'),cuda),
    'lr_scheduler': array([<class 'torch.optim.lr_scheduler.StepLR'>, {'step_size': 1, 'gamma': 0.99}], dtype=object),
    'max_grad_norm': 1000000.0,
    'output_activation': None,
    'output_width': 203,
    'regularization': L1RegularizationLoss(device=cuda, scale=2.000000E-07),
    'skips': array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
       [0, 0, 0, 0, 0, 0, 1, 0, 0, 0]]),
    'width': 1024,
    'width_interpolation_steps_input': 0,
    'width_interpolation_steps_output': 3}
---
neural network:
Sequential(
  (0_linear(202,1024)): Linear(in_features=202, out_features=1024, bias=True)
  (0_swish(2'00)): Swish(
    (sigmoid): Sigmoid()
  )
  (1_linear(1024,1024)): Linear(in_features=1024, out_features=1024, bias=True)
  (1_swish(1'00)): Swish(
    (sigmoid): Sigmoid()
  )
  (2_skip_to_7(1024)): SkipConnection()
  (2_linear(1024,1024)): Linear(in_features=1024, out_features=1024, bias=True)
  (2_swish(2'00)): Swish(
    (sigmoid): Sigmoid()
  )
  (3_linear(1024,1024)): Linear(in_features=1024, out_features=1024, bias=True)
  (3_swish(0'50)): Swish(
    (sigmoid): Sigmoid()
  )
  (4_batch_norm(1024)): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (4_linear(1024,819)): Linear(in_features=1024, out_features=819, bias=True)
  (4_swish(0'50)): Swish(
    (sigmoid): Sigmoid()
  )
  (5_linear(819,614)): Linear(in_features=819, out_features=614, bias=True)
  (5_swish(2'00)): Swish(
    (sigmoid): Sigmoid()
  )
  (6_linear(614,409)): Linear(in_features=614, out_features=409, bias=True)
  (6_swish(1'00)): Swish(
    (sigmoid): Sigmoid()
  )
  (7_skip_from_2(1024)): SkipConnection()
  (7_linear(1433,203)): Linear(in_features=1433, out_features=203, bias=True)
)
---
parameter count:
5244319
---
