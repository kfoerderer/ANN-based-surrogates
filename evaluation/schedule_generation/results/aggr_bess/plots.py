#%%
import numpy as np
import matplotlib
import matplotlib.pyplot as plt

presentation = True
matplotlib.rc('font', family='TeX Gyre Termes')

if presentation:
    matplotlib.rc('font', size=14)

#%%

quartiles = [
    ('random (4)', [1.0, 1.0, 1.0, 1.0, 2.0]),
    ('random (24)', [1.0, 1.0, 1.0, 1.0, 4.0]),
    ('random (96)', [1.0, 1.0, 1.0, 2.0, 11.0]),
    ('reference (4)', [1.0, 1.0, 1.0, 1.0, 3.0]),
    ('reference (24)', [1.0, 2.0, 5.0, 8.0, 22.0]),
    ('reference (96)', [1.0, 14.0, 20.0, 27.0, 84.0]),
]

fig, ax = plt.subplots(figsize=(8,4))

for idx, (label, values) in enumerate(quartiles):
    boxplot = ax.boxplot(values, whis=(0,100), positions=[idx])#, medianprops=medianprops)

    for median in boxplot['medians']:
        median.set(color='firebrick', linewidth=1.5,)
        x,y = median.get_data()
        xn = (x-(x.sum()/2.))*0.5+(x.sum()/2.)
        plt.plot(xn, y, color="firebrick", linewidth=7, solid_capstyle="butt", zorder=4)

if presentation:
    plt.title('Number of errors per (infeasible) load schedule')
else:
    ax.set(ylabel='Number of errors per (infeasible) load schedule')
ax.set(xticklabels = [label for (label, values) in quartiles])
fig.tight_layout()
plt.show()

if presentation:
    fig.savefig('results_aggr_bess_errors_per_schedule.png', dpi=300)
else:
    fig.savefig('results_aggr_bess_errors_per_schedule.pdf')

#%%


data = [
    ('random (4)', [-843750.0000000002, -717812.4999999995, -651562.5000000005, -531250.0000000005, -93750.00000000047, -31249.99999999907, 31250.000000002095, 406249.99999999977, 468750.00000000047, 562500.0000000009, 750000.0000000005]),
    ('random (24)', [-968750.0, -644687.5000000001, -531250.0000000005, -468750.0, -218750.0, -62500.0, 31250.000000001863, 312500.0, 406249.99999999936, 488437.49999999645, 750000.0000000005]),
    ('random (96)', [-1625000.0, -968749.9999999997, -812500.0, -687499.9999999998, -343750.0, -156250.00000000047, -31250.00000000093, 250000.0, 374999.99999999953, 500000.0, 1156250.0]),
    ('reference (4)', [-1093750.0, -875000.0, -812500.0, -749999.9999999995, -375000.00000000047, -31250.000000000175, 281250.0, 625000.0, 718749.9999999995, 812500.0, 1125000.0000000002]),
    ('reference (24)', [-1343750.0, -812500.0, -718750.0, -625000.0, -312500.0, -93750.0, 124999.99999999977, 343750.0, 468749.99999999953, 562500.0000000009, 1125000.0000000002]),
    ('reference (96)', [-1843750.0, -875000.0, -781250.0, -687500.0, -375000.0, -156250.0, 62499.99999999994, 218749.99999999988, 281250.0, 406249.99999999953, 1125000.0000000002]),
]

quantiles = [0, 0.01, 0.025, 0.05, 0.25, 0.5, 0.75, 0.95, 0.975, 0.99, 1]
idx0, idx25, idx50, idx75, idx100 = quantiles.index(0), quantiles.index(0.25), quantiles.index(0.50), quantiles.index(0.75), quantiles.index(1)

quartiles = []
for (key, values) in data:
    quartiles.append((key, [values[idx0], values[idx25], values[idx50], values[idx75], values[idx100]]))


fig, ax = plt.subplots(figsize=(8,4))

for idx, (label, values) in enumerate(quartiles):
    boxplot = ax.boxplot(np.array(values)/1000, whis=(0,100), positions=[idx])#, medianprops=medianprops)

    for median in boxplot['medians']:
        median.set(color='firebrick', linewidth=1.5,)
        x,y = median.get_data()
        xn = (x-(x.sum()/2.))*0.5+(x.sum()/2.)
        plt.plot(xn, y, color="firebrick", linewidth=7, solid_capstyle="butt", zorder=4)

if presentation:
    plt.title('Errors (unequal 0) in kW')
else:
    ax.set(ylabel='Errors (unequal 0) in kW')
ax.set(xticklabels = [label for (label, values) in quartiles])
fig.tight_layout()
plt.show()

if presentation:
    fig.savefig('results_aggr_bess_errors.png', dpi=300)
else:    
    fig.savefig('results_aggr_bess_errors.pdf')

# %%

x = np.arange(0,96+1)
series = [
    ('random', [10000, 9994, 9966, 9892, 9802, 9717, 9628, 9539, 9453, 9366, 9279, 9199, 9111, 9034, 8975, 8917, 8857, 8800, 8740, 8681, 8624, 8563, 8515, 8459, 8402, 8341, 8290, 8244, 8193, 8149, 8098, 8039, 7983, 7921, 7863, 7812, 7755, 7691, 7623, 7551, 7475, 7414, 7345, 7281, 7220, 7163, 7092, 7047, 7006, 6954, 6900, 6851, 6804, 6759, 6699, 6635, 6584, 6538, 6484, 6422, 6350, 6304, 6250, 6191, 6126, 6053, 5997, 5945, 5890, 5843, 5787, 5734, 5686, 5633, 5573, 5514, 5455, 5399, 5348, 5306, 5263, 5212, 5175, 5135, 5107, 5061, 5014, 4961, 4913, 4866, 4817, 4776, 4731, 4691, 4654, 4608, 4555]),
    ('random*', [10000, 9994, 9986, 9956, 9934, 9914, 9884, 9856, 9834, 9812, 9785, 9763, 9738, 9718, 9698, 9679, 9662, 9641, 9622, 9600, 9580, 9559, 9549, 9531, 9507, 9487, 9465, 9445, 9431, 9408, 9391, 9373, 9357, 9333, 9318, 9297, 9270, 9246, 9215, 9188, 9164, 9145, 9125, 9111, 9085, 9064, 9032, 9016, 9006, 8987, 8966, 8952, 8933, 8915, 8895, 8863, 8846, 8835, 8814, 8796, 8763, 8746, 8732, 8714, 8686, 8653, 8633, 8618, 8603, 8593, 8579, 8555, 8538, 8524, 8501, 8482, 8467, 8449, 8432, 8420, 8406, 8393, 8383, 8371, 8358, 8347, 8331, 8315, 8302, 8293, 8275, 8260, 8246, 8241, 8230, 8212, 8203]),
    ('reference', [10000, 9997, 9852, 6799, 6195, 5739, 4963, 4502, 3934, 3683, 3340, 2954, 2675, 2524, 2315, 2096, 1850, 1742, 1612, 1469, 1307, 1226, 1132, 1043, 931, 877, 822, 750, 675, 621, 578, 524, 479, 438, 410, 382, 348, 334, 312, 287, 263, 249, 230, 211, 188, 181, 171, 157, 144, 140, 128, 116, 106, 101, 95, 90, 83, 79, 73, 69, 64, 60, 54, 47, 43, 40, 39, 37, 34, 34, 31, 27, 25, 25, 25, 25, 24, 24, 23, 22, 21, 20, 20, 16, 16, 16, 15, 15, 12, 12, 11, 9, 9, 9, 8, 7, 7]),
    ('reference*', [10000, 9997, 9871, 7367, 6959, 6616, 6173, 5917, 5642, 5492, 5294, 5114, 5005, 4923, 4809, 4711, 4611, 4546, 4479, 4413, 4365, 4318, 4274, 4243, 4232]),
    ('reference*', [10000, 9997, 9852, 6895, 6318, 5880, 5169, 4748, 4226, 3992, 3672, 3319, 3065, 2929, 2742, 2556, 2331, 2233, 2115, 1982, 1842, 1766, 1679, 1600, 1504, 1454, 1409, 1348, 1282, 1237, 1198, 1151, 1114, 1078, 1054, 1030, 1001, 991, 974, 953, 933, 921, 905, 889, 871, 866, 859, 849, 837, 833, 822, 812, 805, 801, 796, 793, 787, 785, 781, 777, 772, 769, 764, 760, 756, 753, 752, 750, 749, 749, 747, 743, 742, 742, 742, 742, 742, 742, 742, 741, 741, 741, 741, 738, 738, 738, 737, 737, 735, 735, 735, 735, 735, 735, 735, 734, 734]),
    ('reference, 2% buffer', [10000, 10000, 9994, 8192, 8044, 7931, 7695, 7557, 7375, 7243, 7103, 6928, 6774, 6690, 6573, 6472, 6322, 6227, 6115, 5993, 5857, 5766, 5658, 5530, 5395, 5313, 5208, 5096, 4939, 4854, 4765, 4668, 4549, 4462, 4358, 4264, 4132, 4053, 3981, 3906, 3821, 3757, 3678, 3602, 3519, 3456, 3382, 3308, 3221, 3165, 3096, 3026, 2954, 2912, 2860, 2798, 2726, 2661, 2595, 2533, 2460, 2415, 2359, 2311, 2251, 2216, 2167, 2116, 2056, 2019, 1988, 1937, 1889, 1857, 1823, 1784, 1734, 1707, 1674, 1634, 1597, 1574, 1538, 1503, 1465, 1434, 1401, 1360, 1325, 1296, 1267, 1245, 1210, 1194, 1173, 1144, 1115]),
    ('reference*, 2% buffer', [10000, 10000, 9996, 9189, 9146, 9088, 9003, 8910, 8785, 8659, 8530, 8392, 8284, 8205, 8102, 8012, 7914, 7828, 7737, 7638, 7552, 7471, 7405, 7345, 7312]),
    ('reference*, 2% buffer', [10000, 10000, 9995, 8526, 8414, 8320, 8133, 8012, 7841, 7710, 7573, 7410, 7268, 7186, 7072, 6971, 6830, 6737, 6633, 6517, 6391, 6301, 6201, 6085, 5969, 5888, 5792, 5696, 5558, 5477, 5401, 5322, 5215, 5135, 5038, 4954, 4849, 4780, 4718, 4655, 4591, 4536, 4468, 4401, 4342, 4286, 4219, 4154, 4089, 4039, 3977, 3920, 3866, 3829, 3783, 3733, 3680, 3621, 3572, 3517, 3460, 3420, 3373, 3335, 3288, 3259, 3217, 3179, 3138, 3109, 3083, 3041, 3008, 2981, 2954, 2927, 2889, 2868, 2842, 2817, 2796, 2779, 2757, 2730, 2707, 2680, 2660, 2633, 2614, 2592, 2571, 2558, 2542, 2530, 2525, 2513, 2507]),
]

normalization = 100/10000

colors = {
    'random': 'firebrick',
    'random*': 'firebrick',
    'reference': 'darkblue',
    'reference*': 'darkblue',
    'reference, 2% buffer': 'teal',
    'reference*, 2% buffer': 'teal',
}

fmt = {
    'random': '-',
    'random*': '--',
    'reference': '-.',
    'reference*': ':',
    'reference, 2% buffer': '-.',
    'reference*, 2% buffer': ':',
}

fig, ax = plt.subplots(figsize=(8,4))

labels = []
for label, values in series:
    if label in labels:
        ax.plot(x[:len(values)], np.array(values)*normalization, fmt[label], label=None, color=colors[label])
    else:
        ax.plot(x[:len(values)], np.array(values)*normalization, fmt[label], label=label, color=colors[label])
        labels.append(label)

ax.legend(loc='lower left')
ax.legend(frameon=False)
#ax.set(xticklabels = [label for (label, values) in quartiles])
#ax.set(yticks=ticks)
ax.set(xlabel='Time step')
if presentation:
    plt.title('Percentage of feasible load schedules')
else:
    ax.set(ylabel='Percentage of feasible load schedules')
fig.tight_layout()
plt.show()

if presentation:
    fig.savefig('results_aggr_bess_feasibility_a.png', dpi=300)
else:
    fig.savefig('results_aggr_bess_feasibility_a.pdf')

# %%

x = np.arange(0,96+1)
series = [
    ('random, 2% buffer', [10000, 10000, 10000, 9990, 9970, 9953, 9939, 9930, 9921, 9911, 9906, 9899, 9896, 9895, 9893, 9889, 9889, 9885, 9885, 9883, 9883, 9881, 9879, 9878, 9877, 9873, 9871, 9868, 9864, 9862, 9856, 9852, 9846, 9842, 9835, 9827, 9823, 9819, 9814, 9813, 9805, 9800, 9798, 9792, 9784, 9779, 9772, 9762, 9758, 9754, 9748, 9741, 9729, 9722, 9704, 9697, 9689, 9678, 9670, 9656, 9648, 9636, 9627, 9619, 9610, 9597, 9585, 9564, 9551, 9536, 9525, 9505, 9485, 9472, 9456, 9441, 9430, 9410, 9391, 9378, 9366, 9349, 9333, 9319, 9308, 9288, 9271, 9254, 9237, 9226, 9199, 9179, 9165, 9146, 9137, 9118, 9105]),
    ('random*, 2% buffer', [10000, 10000, 10000, 9999, 9998, 9997, 9997, 9997, 9997, 9997, 9997, 9997, 9996, 9996, 9996, 9996, 9996, 9996, 9996, 9996, 9996, 9996, 9996, 9996, 9996, 9996, 9996, 9994, 9994, 9993, 9991, 9990, 9989, 9989, 9987, 9987, 9987, 9986, 9983, 9983, 9981, 9980, 9980, 9978, 9976, 9975, 9971, 9970, 9970, 9969, 9967, 9966, 9964, 9963, 9957, 9955, 9952, 9950, 9948, 9946, 9944, 9943, 9940, 9938, 9935, 9932, 9928, 9923, 9920, 9919, 9914, 9909, 9904, 9900, 9896, 9891, 9888, 9883, 9879, 9878, 9875, 9871, 9868, 9866, 9864, 9862, 9861, 9860, 9856, 9854, 9850, 9843, 9840, 9835, 9831, 9826, 9823]),
    ('reference, 5% buffer', [10000, 10000, 9999, 9989, 9988, 9988, 9987, 9986, 9982, 9982, 9982, 9982, 9981, 9981, 9981, 9978, 9968, 9959, 9942, 9932, 9913, 9897, 9885, 9865, 9832, 9808, 9784, 9743, 9708, 9680, 9642, 9596, 9559, 9518, 9474, 9434, 9370, 9332, 9281, 9227, 9158, 9104, 9050, 8992, 8920, 8868, 8819, 8762, 8689, 8638, 8577, 8509, 8453, 8408, 8357, 8290, 8205, 8141, 8090, 8026, 7934, 7876, 7822, 7760, 7682, 7636, 7572, 7504, 7446, 7394, 7347, 7293, 7216, 7168, 7120, 7054, 6972, 6911, 6862, 6803, 6727, 6692, 6650, 6591, 6511, 6458, 6409, 6354, 6290, 6247, 6207, 6148, 6077, 6027, 5981, 5929, 5872]),
    ('reference*, 5% buffer', [10000, 10000, 9999, 9998, 9997, 9997, 9996, 9995, 9995, 9995, 9995, 9995, 9994, 9994, 9994, 9991, 9981, 9972, 9958, 9948, 9929, 9914, 9904, 9884, 9856, 9834, 9813, 9775, 9743, 9717, 9685, 9644, 9611, 9574, 9538, 9501, 9447, 9411, 9368, 9324, 9264, 9220, 9172, 9122, 9069, 9031, 8993, 8948, 8890, 8846, 8796, 8741, 8699, 8664, 8631, 8575, 8509, 8459, 8418, 8372, 8304, 8263, 8228, 8183, 8129, 8101, 8055, 8002, 7967, 7926, 7894, 7856, 7799, 7764, 7728, 7678, 7619, 7577, 7543, 7495, 7442, 7415, 7383, 7342, 7291, 7249, 7214, 7172, 7132, 7103, 7080, 7036, 6985, 6951, 6923, 6881, 6859]),
]

normalization = 100/10000

colors = {
    'random': 'sandybrown',
    'random*': 'sandybrown',
    'random, 2% buffer': 'gold',
    'random*, 2% buffer': 'gold',
    'reference, 5% buffer': 'dodgerblue',
    'reference*, 5% buffer': 'dodgerblue',
}

fmt = {
    'random, 2% buffer' : '-',
    'random*, 2% buffer' : '--',
    'reference, 5% buffer': '-.',
    'reference*, 5% buffer': ':',
}

fig, ax = plt.subplots(figsize=(8,4))

for label, values in series:
    ax.plot(x[:len(values)], np.array(values)*normalization, fmt[label], label=label, color=colors[label])
    

ax.legend(loc='lower left')
ax.legend(frameon=False)
#ax.set(xticklabels = [label for (label, values) in quartiles])
#ax.set(yticks=ticks)
ax.set(xlabel='Time step')
if presentation:
    plt.title('Percentage of feasible load schedules')
else:
    ax.set(ylabel='Percentage of feasible load schedules')
fig.tight_layout()
plt.show()

if presentation:
    fig.savefig('results_aggr_bess_feasibility_b.png', dpi=300)
else:
    fig.savefig('results_aggr_bess_feasibility_b.pdf')

# %%
