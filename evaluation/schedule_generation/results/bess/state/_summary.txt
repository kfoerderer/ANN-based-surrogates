meta data:
{   'ann_output_processor': BatchProcessor([('dnml', slice(0, 1, None), BatchProcessor([('clip', slice(0, 1, None), BatchProcessor([]), 0, 48600000.0)]), tensor([0.]), tensor([48600000.])), ('1', slice(1, 3, None), BatchProcessor([])), ('mode', slice(3, 204, None), BatchProcessor([]), tensor([ 5000.,  4950.,  4900.,  4850.,  4800.,  4750.,  4700.,  4650.,  4600.,
         4550.,  4500.,  4450.,  4400.,  4350.,  4300.,  4250.,  4200.,  4150.,
         4100.,  4050.,  4000.,  3950.,  3900.,  3850.,  3800.,  3750.,  3700.,
         3650.,  3600.,  3550.,  3500.,  3450.,  3400.,  3350.,  3300.,  3250.,
         3200.,  3150.,  3100.,  3050.,  3000.,  2950.,  2900.,  2850.,  2800.,
         2750.,  2700.,  2650.,  2600.,  2550.,  2500.,  2450.,  2400.,  2350.,
         2300.,  2250.,  2200.,  2150.,  2100.,  2050.,  2000.,  1950.,  1900.,
         1850.,  1800.,  1750.,  1700.,  1650.,  1600.,  1550.,  1500.,  1450.,
         1400.,  1350.,  1300.,  1250.,  1200.,  1150.,  1100.,  1050.,  1000.,
          950.,   900.,   850.,   800.,   750.,   700.,   650.,   600.,   550.,
          500.,   450.,   400.,   350.,   300.,   250.,   200.,   150.,   100.,
           50.,    -0.,   -50.,  -100.,  -150.,  -200.,  -250.,  -300.,  -350.,
         -400.,  -450.,  -500.,  -550.,  -600.,  -650.,  -700.,  -750.,  -800.,
         -850.,  -900.,  -950., -1000., -1050., -1100., -1150., -1200., -1250.,
        -1300., -1350., -1400., -1450., -1500., -1550., -1600., -1650., -1700.,
        -1750., -1800., -1850., -1900., -1950., -2000., -2050., -2100., -2150.,
        -2200., -2250., -2300., -2350., -2400., -2450., -2500., -2550., -2600.,
        -2650., -2700., -2750., -2800., -2850., -2900., -2950., -3000., -3050.,
        -3100., -3150., -3200., -3250., -3300., -3350., -3400., -3450., -3500.,
        -3550., -3600., -3650., -3700., -3750., -3800., -3850., -3900., -3950.,
        -4000., -4050., -4100., -4150., -4200., -4250., -4300., -4350., -4400.,
        -4450., -4500., -4550., -4600., -4650., -4700., -4750., -4800., -4850.,
        -4900., -4950., -5000.])), ('mode', slice(204, 205, None), BatchProcessor([]), tensor([0.]))]),
    'dt': 900,
    'input_processor': BatchProcessor([('nmlz', slice(0, 1, None), BatchProcessor([]), tensor([0.]), tensor([48600000.])), ('1', slice(1, 3, None), BatchProcessor([])), ('oneh', slice(3, 4, None), BatchProcessor([]), tensor([-5000., -4950., -4900., -4850., -4800., -4750., -4700., -4650., -4600.,
        -4550., -4500., -4450., -4400., -4350., -4300., -4250., -4200., -4150.,
        -4100., -4050., -4000., -3950., -3900., -3850., -3800., -3750., -3700.,
        -3650., -3600., -3550., -3500., -3450., -3400., -3350., -3300., -3250.,
        -3200., -3150., -3100., -3050., -3000., -2950., -2900., -2850., -2800.,
        -2750., -2700., -2650., -2600., -2550., -2500., -2450., -2400., -2350.,
        -2300., -2250., -2200., -2150., -2100., -2050., -2000., -1950., -1900.,
        -1850., -1800., -1750., -1700., -1650., -1600., -1550., -1500., -1450.,
        -1400., -1350., -1300., -1250., -1200., -1150., -1100., -1050., -1000.,
         -950.,  -900.,  -850.,  -800.,  -750.,  -700.,  -650.,  -600.,  -550.,
         -500.,  -450.,  -400.,  -350.,  -300.,  -250.,  -200.,  -150.,  -100.,
          -50.,     0.,    50.,   100.,   150.,   200.,   250.,   300.,   350.,
          400.,   450.,   500.,   550.,   600.,   650.,   700.,   750.,   800.,
          850.,   900.,   950.,  1000.,  1050.,  1100.,  1150.,  1200.,  1250.,
         1300.,  1350.,  1400.,  1450.,  1500.,  1550.,  1600.,  1650.,  1700.,
         1750.,  1800.,  1850.,  1900.,  1950.,  2000.,  2050.,  2100.,  2150.,
         2200.,  2250.,  2300.,  2350.,  2400.,  2450.,  2500.,  2550.,  2600.,
         2650.,  2700.,  2750.,  2800.,  2850.,  2900.,  2950.,  3000.,  3050.,
         3100.,  3150.,  3200.,  3250.,  3300.,  3350.,  3400.,  3450.,  3500.,
         3550.,  3600.,  3650.,  3700.,  3750.,  3800.,  3850.,  3900.,  3950.,
         4000.,  4050.,  4100.,  4150.,  4200.,  4250.,  4300.,  4350.,  4400.,
         4450.,  4500.,  4550.,  4600.,  4650.,  4700.,  4750.,  4800.,  4850.,
         4900.,  4950.,  5000.]))]),
    'model': BESS(state=[38792041.736842        0.              1.      ], capacity=48600000.0, charging_efficiency=0.95, discharging_efficiency=0.95, relative_loss=0, correct_infeasible=True),
    'output_action_feasibility': False,
    'output_interaction': True,
    'output_new_state': True,
    'output_processor': BatchProcessor([('nmlz', slice(0, 1, None), BatchProcessor([]), tensor([0.]), tensor([48600000.])), ('1', slice(1, 3, None), BatchProcessor([])), ('didx', slice(3, 4, None), BatchProcessor([]), tensor([ 5000.,  4950.,  4900.,  4850.,  4800.,  4750.,  4700.,  4650.,  4600.,
         4550.,  4500.,  4450.,  4400.,  4350.,  4300.,  4250.,  4200.,  4150.,
         4100.,  4050.,  4000.,  3950.,  3900.,  3850.,  3800.,  3750.,  3700.,
         3650.,  3600.,  3550.,  3500.,  3450.,  3400.,  3350.,  3300.,  3250.,
         3200.,  3150.,  3100.,  3050.,  3000.,  2950.,  2900.,  2850.,  2800.,
         2750.,  2700.,  2650.,  2600.,  2550.,  2500.,  2450.,  2400.,  2350.,
         2300.,  2250.,  2200.,  2150.,  2100.,  2050.,  2000.,  1950.,  1900.,
         1850.,  1800.,  1750.,  1700.,  1650.,  1600.,  1550.,  1500.,  1450.,
         1400.,  1350.,  1300.,  1250.,  1200.,  1150.,  1100.,  1050.,  1000.,
          950.,   900.,   850.,   800.,   750.,   700.,   650.,   600.,   550.,
          500.,   450.,   400.,   350.,   300.,   250.,   200.,   150.,   100.,
           50.,    -0.,   -50.,  -100.,  -150.,  -200.,  -250.,  -300.,  -350.,
         -400.,  -450.,  -500.,  -550.,  -600.,  -650.,  -700.,  -750.,  -800.,
         -850.,  -900.,  -950., -1000., -1050., -1100., -1150., -1200., -1250.,
        -1300., -1350., -1400., -1450., -1500., -1550., -1600., -1650., -1700.,
        -1750., -1800., -1850., -1900., -1950., -2000., -2050., -2100., -2150.,
        -2200., -2250., -2300., -2350., -2400., -2450., -2500., -2550., -2600.,
        -2650., -2700., -2750., -2800., -2850., -2900., -2950., -3000., -3050.,
        -3100., -3150., -3200., -3250., -3300., -3350., -3400., -3450., -3500.,
        -3550., -3600., -3650., -3700., -3750., -3800., -3850., -3900., -3950.,
        -4000., -4050., -4100., -4150., -4200., -4250., -4300., -4350., -4400.,
        -4450., -4500., -4550., -4600., -4650., -4700., -4750., -4800., -4850.,
        -4900., -4950., -5000.])), ('didx', slice(4, 5, None), BatchProcessor([]), tensor([0.]))]),
    'sampling_parameters': {   'infeasible_chance': 0.6666666666666666,
                               'soc_distribution': (   [   (0, 0.25),
                                                           (0.25, 0.75),
                                                           (0.75, 1)],
                                                       [0.375, 0.25, 0.375])}}
---
parameters:
{   'batch_count': 1000.0,
    'batch_norms': array([0, 0, 0, 0, 0, 0, 0, 0, 0, 1]),
    'batch_size': 3072,
    'betas': array([2. , 2. , 0.5, 1. , 0.5, 2. , 0.5, 2. , 1. , 1. ]),
    'dropout': array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
    'early_stopping_callback': EarlyStoppingCallback(stopping_scores={}, improvement_window=100),
    'epoch_count': 1000,
    'hidden_layer_count': 5,
    'input_width': 204,
    'learning_rate': 0.001,
    'loss': MixedLoss([(MSELoss(), 1), (MSELoss(), 2), (CrossEntropyLoss(), 201), (CrossEntropyLoss(), 1)],tensor([1.0000e+06, 1.0000e+00, 1.0000e+00, 1.0000e+00], device='cuda:0'),cuda),
    'lr_scheduler': array([<class 'torch.optim.lr_scheduler.StepLR'>, {'step_size': 1, 'gamma': 0.99}], dtype=object),
    'max_grad_norm': 1000000.0,
    'output_activation': None,
    'output_width': 205,
    'regularization': L1RegularizationLoss(device=cuda, scale=2.000000E-08),
    'skips': array([[0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 1, 0, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
       [0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
       [0, 1, 1, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]]),
    'width': 1024,
    'width_interpolation_steps_input': 0,
    'width_interpolation_steps_output': 5}
---
neural network:
Sequential(
  (0_skip_to_3(204)): SkipConnection()
  (0_linear(204,888)): Linear(in_features=204, out_features=888, bias=True)
  (0_swish(2'00)): Swish(
    (sigmoid): Sigmoid()
  )
  (1_skip_to_3(888)): SkipConnection()
  (1_skip_to_5(888)): SkipConnection()
  (1_linear(888,751)): Linear(in_features=888, out_features=751, bias=True)
  (1_swish(0'50)): Swish(
    (sigmoid): Sigmoid()
  )
  (2_linear(751,615)): Linear(in_features=751, out_features=615, bias=True)
  (2_swish(2'00)): Swish(
    (sigmoid): Sigmoid()
  )
  (3_skip_from_0(204)): SkipConnection()
  (3_skip_from_1(888)): SkipConnection()
  (3_linear(1707,478)): Linear(in_features=1707, out_features=478, bias=True)
  (3_swish(1'00)): Swish(
    (sigmoid): Sigmoid()
  )
  (4_linear(478,342)): Linear(in_features=478, out_features=342, bias=True)
  (4_swish(1'00)): Swish(
    (sigmoid): Sigmoid()
  )
  (5_skip_from_1(888)): SkipConnection()
  (5_linear(1230,205)): Linear(in_features=1230, out_features=205, bias=True)
)
---
parameter count:
2544761
---
