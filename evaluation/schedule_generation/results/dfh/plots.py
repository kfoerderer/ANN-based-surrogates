#%%
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
from matplotlib.ticker import MaxNLocator

presentation = False
matplotlib.rc('font', family='TeX Gyre Termes')

if presentation:
    matplotlib.rc('font', size=14)
#%%

quartiles = [
    ('random (4)', [1.0, 1.0, 1.0, 1.0, 1.0]),
    ('random (24)', [1.0, 1.0, 1.0, 2.0, 8.0]),
    ('random (96)', [1.0, 1.0, 1.0, 3.0, 16.0]),
    ('reference (4)', [1.0, 1.0, 1.0, 1.0, 2.0]),
    ('reference (24)', [1.0, 1.0, 1.0, 1.0, 9.0]),
    ('reference (96)', [1.0, 1.0, 2.0, 3.0, 21.0]),
]

fig, ax = plt.subplots(figsize=(8,4))
ax.yaxis.set_major_locator(MaxNLocator(integer=True))
for idx, (label, values) in enumerate(quartiles):
    boxplot = ax.boxplot(values, whis=(0,100), positions=[idx])#, medianprops=medianprops)

    for median in boxplot['medians']:
        median.set(color='firebrick', linewidth=1.5,)
        x,y = median.get_data()
        xn = (x-(x.sum()/2.))*0.5+(x.sum()/2.)
        plt.plot(xn, y, color="firebrick", linewidth=7, solid_capstyle="butt", zorder=4)

if presentation:
    plt.title('Number of errors per (infeasible) load schedule')
else:
    ax.set(ylabel='Number of errors per (infeasible) load schedule')
ax.set(xticklabels = [label for (label, values) in quartiles])
fig.tight_layout()
plt.show()

if presentation:
    fig.savefig('results_dfh_errors_per_schedule.png', dpi=300)
else:
    fig.savefig('results_dfh_errors_per_schedule.pdf')

#%%


data = [
    ('random (4)', [-1300.0, -1252.0, -1180.0, -1060.0, -100.0, -100.0, 100.0, 400.0, 400.0, 400.0, 400.0]),
    ('random (24)', [-10000.0, -5100.0, -4300.0, -3100.0, -1200.0, -100.0, 700.0, 3100.0, 4400.0, 5124.000000000001, 9700.0]),
    ('random (96)', [-10100.0, -5300.0, -4600.0, -3600.0, -1400.0, -200.0, 600.0, 3200.0, 4432.499999999982, 5200.0, 9700.0]),
    ('reference (4)', [-2700.0, -2582.0, -2025.0, -834.9999999999999, -100.0, 100.0, 100.0, 239.99999999999773, 2259.999999999997, 3481.999999999999, 3600.0]),
    ('reference (24)', [-7700.0, -5085.0, -3200.0, -2600.0, -100.0, -100.0, 100.0, 1200.0, 2500.0, 4484.999999999991, 9300.0]),
    ('reference (96)', [-9800.0, -5100.0, -4100.0, -3200.0, -600.0, -100.0, -100.0, 1700.0, 2500.0, 4200.0, 9300.0]),
]

quantiles = [0, 0.01, 0.025, 0.05, 0.25, 0.5, 0.75, 0.95, 0.975, 0.99, 1]
idx0, idx25, idx50, idx75, idx100 = quantiles.index(0), quantiles.index(0.25), quantiles.index(0.50), quantiles.index(0.75), quantiles.index(1)

quartiles = []
for (key, values) in data:
    quartiles.append((key, [values[idx0], values[idx25], values[idx50], values[idx75], values[idx100]]))


fig, ax = plt.subplots(figsize=(8,4))

for idx, (label, values) in enumerate(quartiles):
    boxplot = ax.boxplot(values, whis=(0,100), positions=[idx])#, medianprops=medianprops)

    for median in boxplot['medians']:
        median.set(color='firebrick', linewidth=1.5,)
        x,y = median.get_data()
        xn = (x-(x.sum()/2.))*0.5+(x.sum()/2.)
        plt.plot(xn, y, color="firebrick", linewidth=7, solid_capstyle="butt", zorder=4)

if presentation:
    plt.title('Errors (unequal 0) in W')
else:
    ax.set(ylabel='Errors (unequal 0) in W')
ax.set(xticklabels = [label for (label, values) in quartiles])
fig.tight_layout()
plt.show()

if presentation:
    fig.savefig('results_dfh_errors.png', dpi=300)
else:
    fig.savefig('results_dfh_errors.pdf')

# %%

x = np.arange(0,96+1)
series = [
    ('random, 1°C buffer', [10000, 10000, 9998, 9997, 9993, 9990, 9985, 9982, 9980, 9976, 9973, 9965, 9963, 9959, 9954, 9947, 9946, 9941, 9938, 9933, 9927, 9920, 9915, 9913, 9908, 9900, 9891, 9887, 9878, 9868, 9858, 9851, 9842, 9833, 9823, 9811, 9805, 9798, 9784, 9779, 9771, 9766, 9754, 9741, 9737, 9725, 9718, 9707, 9700, 9693, 9678, 9671, 9664, 9652, 9641, 9629, 9624, 9616, 9605, 9600, 9591, 9585, 9580, 9565, 9555, 9545, 9530, 9512, 9504, 9486, 9469, 9453, 9444, 9429, 9410, 9396, 9386, 9371, 9355, 9335, 9314, 9298, 9293, 9283, 9272, 9262, 9243, 9227, 9213, 9200, 9182, 9163, 9153, 9132, 9111, 9100, 9082]),
    ('random*, 1°C buffer', [10000, 10000, 10000, 10000, 9999, 9998, 9996, 9993, 9993, 9993, 9992, 9992, 9992, 9992, 9990, 9990, 9990, 9990, 9990, 9989, 9989, 9987, 9987, 9987, 9986, 9986, 9985, 9984, 9983, 9983, 9983, 9982, 9982, 9982, 9982, 9981, 9981, 9981, 9981, 9981, 9980, 9979, 9977, 9976, 9976, 9975, 9974, 9973, 9972, 9972, 9971, 9971, 9970, 9969, 9969, 9968, 9967, 9967, 9967, 9966, 9965, 9965, 9965, 9965, 9965, 9965, 9964, 9963, 9963, 9960, 9958, 9958, 9957, 9957, 9956, 9955, 9955, 9953, 9950, 9948, 9946, 9945, 9944, 9943, 9942, 9941, 9941, 9941, 9941, 9940, 9939, 9936, 9935, 9934, 9933, 9933, 9932]),
    ('random, 2°C buffer', [10000, 10000, 9995, 9995, 9994, 9993, 9988, 9979, 9975, 9972, 9966, 9961, 9956, 9954, 9952, 9949, 9942, 9940, 9933, 9928, 9923, 9915, 9909, 9904, 9895, 9887, 9882, 9875, 9865, 9854, 9848, 9838, 9829, 9824, 9817, 9806, 9797, 9785, 9778, 9767, 9755, 9744, 9731, 9727, 9711, 9698, 9686, 9673, 9662, 9652, 9644, 9627, 9613, 9602, 9588, 9577, 9565, 9558, 9547, 9539, 9527, 9514, 9505, 9492, 9477, 9461, 9444, 9426, 9418, 9403, 9392, 9377, 9363, 9348, 9333, 9319, 9306, 9293, 9282, 9265, 9250, 9235, 9226, 9207, 9193, 9181, 9161, 9142, 9124, 9112, 9093, 9074, 9060, 9035, 9030, 9015, 9003]),
    ('random*, 2°C buffer', [10000, 10000, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9997, 9997, 9996, 9996, 9996, 9996, 9996, 9996, 9996, 9995, 9994, 9993, 9993, 9993, 9993, 9993, 9993, 9993, 9993, 9993, 9993, 9991, 9991, 9991, 9991, 9991, 9990, 9988, 9987, 9987, 9986, 9986, 9986, 9986, 9984, 9984, 9984, 9983, 9982, 9981, 9981, 9979, 9979, 9979, 9979, 9979, 9978, 9978, 9977, 9977, 9977, 9977, 9977, 9976, 9976, 9975, 9975, 9975, 9975, 9975, 9975, 9974, 9974, 9974, 9974, 9974, 9974, 9974, 9974, 9973, 9973, 9973, 9972, 9972, 9971, 9971, 9970, 9970, 9970, 9970, 9970, 9969, 9969, 9967, 9967, 9967, 9967]),
    ('reference, 1°C buffer', [10000, 10000, 9999, 9998, 9994, 9990, 9986, 9984, 9980, 9974, 9973, 9969, 9964, 9954, 9948, 9942, 9939, 9935, 9927, 9923, 9915, 9909, 9898, 9886, 9884, 9871, 9867, 9859, 9855, 9844, 9837, 9831, 9819, 9810, 9799, 9783, 9772, 9755, 9746, 9732, 9723, 9709, 9696, 9685, 9676, 9662, 9650, 9638, 9625, 9604, 9590, 9578, 9566, 9551, 9541, 9530, 9513, 9495, 9485, 9477, 9464, 9445, 9436, 9422, 9412, 9393, 9381, 9365, 9349, 9329, 9322, 9308, 9294, 9279, 9263, 9247, 9222, 9198, 9187, 9172, 9151, 9124, 9099, 9073, 9061, 9035, 9018, 9007, 8989, 8971, 8952, 8930, 8911, 8892, 8875, 8850, 8821]),
    ('reference*, 1°C buffer', [10000, 10000, 10000, 9999, 9998, 9996, 9995, 9995, 9995, 9994, 9994, 9994, 9993, 9992, 9991, 9989, 9989, 9988, 9988, 9988, 9983, 9980, 9980, 9977, 9976, 9971, 9970, 9969, 9969, 9966, 9964, 9963, 9961, 9961, 9957, 9955, 9954, 9952, 9951, 9948, 9947, 9945, 9942, 9942, 9941, 9938, 9935, 9935, 9932, 9930, 9928, 9925, 9923, 9920, 9920, 9919, 9918, 9915, 9914, 9910, 9908, 9905, 9905, 9903, 9902, 9900, 9899, 9898, 9892, 9891, 9889, 9889, 9887, 9881, 9878, 9875, 9871, 9866, 9865, 9863, 9863, 9862, 9857, 9856, 9854, 9853, 9850, 9849, 9848, 9846, 9844, 9843, 9842, 9838, 9835, 9835, 9833]),
    ('reference, 2°C buffer', [10000, 10000, 9998, 9996, 9993, 9990, 9989, 9986, 9984, 9977, 9973, 9968, 9963, 9955, 9954, 9950, 9947, 9937, 9930, 9926, 9920, 9909, 9897, 9892, 9886, 9875, 9870, 9867, 9861, 9850, 9845, 9834, 9819, 9806, 9794, 9779, 9774, 9760, 9746, 9740, 9726, 9706, 9696, 9685, 9676, 9659, 9652, 9642, 9629, 9619, 9613, 9601, 9587, 9572, 9557, 9547, 9533, 9520, 9504, 9490, 9478, 9454, 9443, 9432, 9417, 9401, 9388, 9379, 9368, 9345, 9331, 9316, 9303, 9286, 9277, 9266, 9252, 9230, 9222, 9207, 9195, 9169, 9143, 9130, 9115, 9096, 9082, 9066, 9044, 9019, 9009, 8994, 8979, 8959, 8950, 8946, 8926]),
    ('reference*, 2°C buffer', [10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9998, 9998, 9998, 9997, 9997, 9996, 9996, 9996, 9995, 9995, 9995, 9994, 9994, 9994, 9993, 9993, 9993, 9993, 9993, 9993, 9992, 9991, 9991, 9991, 9991, 9991, 9991, 9991, 9991, 9990, 9990, 9989, 9989, 9989, 9988, 9987, 9987, 9987, 9987, 9985, 9983, 9982, 9981, 9981, 9979, 9979, 9979, 9979, 9979, 9978, 9977, 9976, 9975, 9975, 9975, 9974, 9973, 9973, 9973, 9973, 9973, 9973, 9973, 9972, 9971, 9971, 9971, 9970, 9970, 9970, 9970, 9970, 9969, 9969, 9969, 9969, 9968, 9968, 9968, 9967]),
]

normalization = 100/10000

colors = {
    'random': 'firebrick',
    'random*': 'firebrick',
    'random, 1°C buffer': 'sandybrown',
    'random*, 1°C buffer': 'sandybrown',
    'random, 2°C buffer': 'gold',
    'random*, 2°C buffer': 'gold',
    'reference': 'darkblue',
    'reference*': 'darkblue',
    'reference, 1°C buffer': 'dodgerblue',
    'reference*, 1°C buffer': 'dodgerblue',
    'reference, 2°C buffer': 'teal',
    'reference*, 2°C buffer': 'teal',
}

fmt = {
    'random' : '-',
    'random*' : '--',
    'random, 1°C buffer': '-',
    'random*, 1°C buffer': '--',
    'random, 2°C buffer': '-',
    'random*, 2°C buffer': '--',
    'reference': '-.',
    'reference*': ':',
    'reference, 1°C buffer': '-.',
    'reference*, 1°C buffer': ':',
    'reference, 2°C buffer': '-.',
    'reference*, 2°C buffer': ':',
}

fig, ax = plt.subplots(figsize=(8,4))

for label, values in series:
    ax.plot(x, np.array(values)*normalization, fmt[label], label=label, color=colors[label])

ax.legend(loc='lower left')
ax.legend(frameon=False)
#ax.set(xticklabels = [label for (label, values) in quartiles])
#ax.set(yticks=ticks)
ax.set(xlabel='Time step')
if presentation:
    plt.title('Percentage of feasible load schedules')
else:
    ax.set(ylabel='Percentage of feasible load schedules')
fig.tight_layout()
plt.show()

if presentation:
    fig.savefig('results_dfh_feasibility_b.png', dpi=300)
else:
    fig.savefig('results_dfh_feasibility_b.pdf')

# %%

x = np.arange(0,96+1)
series = [
    ('random', [10000, 10000, 9997, 9994, 9991, 9988, 9981, 9976, 9968, 9959, 9954, 9946, 9933, 9925, 9918, 9905, 9895, 9883, 9865, 9855, 9840, 9830, 9811, 9803, 9790, 9773, 9759, 9745, 9732, 9718, 9702, 9690, 9675, 9659, 9641, 9631, 9618, 9599, 9577, 9558, 9538, 9525, 9505, 9486, 9467, 9445, 9428, 9412, 9392, 9375, 9354, 9319, 9293, 9278, 9257, 9235, 9205, 9184, 9159, 9139, 9110, 9094, 9069, 9042, 9012, 8990, 8972, 8937, 8912, 8877, 8851, 8826, 8797, 8775, 8747, 8722, 8698, 8664, 8637, 8611, 8582, 8561, 8537, 8509, 8481, 8459, 8425, 8403, 8375, 8351, 8323, 8304, 8272, 8236, 8208, 8181, 8157]),
    ('random*', [10000, 10000, 9997, 9995, 9992, 9989, 9986, 9984, 9979, 9973, 9970, 9963, 9955, 9949, 9943, 9932, 9926, 9921, 9907, 9899, 9891, 9884, 9873, 9871, 9864, 9851, 9840, 9832, 9822, 9815, 9807, 9801, 9791, 9780, 9769, 9764, 9757, 9745, 9733, 9719, 9707, 9699, 9687, 9680, 9674, 9662, 9652, 9643, 9629, 9618, 9606, 9582, 9565, 9557, 9548, 9535, 9524, 9512, 9498, 9490, 9478, 9467, 9455, 9442, 9423, 9415, 9409, 9392, 9382, 9362, 9346, 9334, 9320, 9309, 9295, 9284, 9273, 9257, 9248, 9236, 9224, 9217, 9206, 9189, 9176, 9161, 9147, 9139, 9127, 9117, 9098, 9088, 9075, 9059, 9051, 9042, 9031]),
    #('random*', [10000, 10000, 9999, 9997, 9992, 9986, 9981, 9974, 9970, 9966, 9965, 9961, 9953, 9945, 9943, 9933, 9925, 9919, 9914, 9907, 9902, 9897, 9893, 9888, 9876]),
    #('random*', [10000, 10000, 9999, 9997, 9992]),
    ('reference', [10000, 9998, 9989, 9967, 9944, 9921, 9882, 9844, 9798, 9767, 9729, 9695, 9651, 9621, 9581, 9526, 9467, 9428, 9377, 9331, 9273, 9234, 9177, 9120, 9037, 8979, 8926, 8869, 8803, 8746, 8692, 8636, 8551, 8503, 8432, 8356, 8284, 8235, 8161, 8084, 7998, 7948, 7878, 7807, 7723, 7680, 7613, 7553, 7473, 7405, 7353, 7294, 7208, 7134, 7069, 6997, 6922, 6872, 6820, 6757, 6685, 6625, 6559, 6487, 6427, 6350, 6302, 6249, 6194, 6127, 6073, 6023, 5968, 5920, 5869, 5808, 5734, 5677, 5626, 5558, 5506, 5456, 5410, 5358, 5300, 5261, 5216, 5160, 5104, 5064, 5031, 4971, 4917, 4870, 4830, 4786, 4729]),
    ('reference*', [10000, 9998, 9989, 9967, 9947, 9927, 9894, 9864, 9830, 9804, 9773, 9744, 9711, 9687, 9658, 9618, 9574, 9541, 9502, 9475, 9429, 9400, 9361, 9314, 9244, 9193, 9155, 9112, 9072, 9034, 8994, 8955, 8890, 8862, 8810, 8757, 8709, 8680, 8626, 8578, 8517, 8481, 8434, 8383, 8325, 8297, 8253, 8220, 8168, 8131, 8106, 8074, 8021, 7971, 7931, 7882, 7844, 7817, 7784, 7753, 7713, 7681, 7639, 7601, 7573, 7532, 7503, 7473, 7445, 7407, 7375, 7353, 7322, 7297, 7273, 7245, 7208, 7184, 7159, 7120, 7095, 7074, 7056, 7035, 7015, 6999, 6977, 6966, 6945, 6926, 6914, 6887, 6863, 6839, 6827, 6812, 6797]),
    #('reference*', [10000, 9998, 9986, 9971, 9942, 9932, 9908, 9870, 9830, 9816, 9787, 9757, 9720, 9703, 9680, 9652, 9616, 9588, 9550, 9504, 9464, 9423, 9379, 9328, 9263]),
    #('reference*', [10000, 9998, 9988, 9973, 9946]),
]

normalization = 100/10000

colors = {
    'random': 'firebrick',
    'random*': 'firebrick',
    'reference': 'darkblue',
    'reference*': 'darkblue',
}

fmt = {
    'random' : '-',
    'random*' : '--',
    'reference': '-.',
    'reference*': ':',
}

fig, ax = plt.subplots(figsize=(8,4))

for label, values in series:
    ax.plot(x[:len(values)], np.array(values)*normalization, fmt[label], label=label, color=colors[label])
    

ax.legend(loc='lower left')
ax.legend(frameon=False)
#ax.set(xticklabels = [label for (label, values) in quartiles])
#ax.set(yticks=ticks)
ax.set(xlabel='Time step')
if presentation:
    plt.title('Percentage of feasible load schedules')
else:
    ax.set(ylabel='Percentage of feasible load schedules')
fig.tight_layout()
plt.show()

if presentation:
    fig.savefig('results_dfh_feasibility_a.png', dpi=300)
else:
    fig.savefig('results_dfh_feasibility_a.pdf')

# %%
