meta data:
{   'ann_output_processor': BatchProcessor([('dnml', slice(0, 1, None), BatchProcessor([]), tensor([0.]), tensor([3.6000e+08])), ('1', slice(1, 4, None), BatchProcessor([('clip', slice(0, 3, None), BatchProcessor([]), 0, 1)])), ('mode', slice(4, 101, None), BatchProcessor([]), tensor([    0.,   900.,  1800.,  2700.,  3600.,  4500.,  5400.,  6300.,  7200.,
         8100.,  9000.,  9900., 10800., 11700., 12600., 13500., 14400., 15300.,
        16200., 17100., 18000., 18900., 19800., 20700., 21600., 22500., 23400.,
        24300., 25200., 26100., 27000., 27900., 28800., 29700., 30600., 31500.,
        32400., 33300., 34200., 35100., 36000., 36900., 37800., 38700., 39600.,
        40500., 41400., 42300., 43200., 44100., 45000., 45900., 46800., 47700.,
        48600., 49500., 50400., 51300., 52200., 53100., 54000., 54900., 55800.,
        56700., 57600., 58500., 59400., 60300., 61200., 62100., 63000., 63900.,
        64800., 65700., 66600., 67500., 68400., 69300., 70200., 71100., 72000.,
        72900., 73800., 74700., 75600., 76500., 77400., 78300., 79200., 80100.,
        81000., 81900., 82800., 83700., 84600., 85500., 86400.])), ('dnml', slice(101, 102, None), BatchProcessor([('clip', slice(0, 1, None), BatchProcessor([]), 0, 84240000.0)]), tensor([0.]), tensor([84240000.])), ('1', slice(102, 104, None), BatchProcessor([])), ('mode', slice(104, 106, None), BatchProcessor([]), tensor([0., 1.])), ('mode', slice(106, 114, None), BatchProcessor([]), tensor([ 900., 1800., 2700., 3600., 4500., 5400., 6300., 7200.])), ('mode', slice(114, 122, None), BatchProcessor([]), tensor([ 900., 1800., 2700., 3600., 4500., 5400., 6300., 7200.])), ('mode', slice(122, 130, None), BatchProcessor([]), tensor([ 900., 1800., 2700., 3600., 4500., 5400., 6300., 7200.])), ('mode', slice(130, 132, None), BatchProcessor([]), tensor([0., 1.])), ('dnml', slice(132, 133, None), BatchProcessor([]), tensor([40.]), tensor([20.])), ('mode', slice(133, 134, None), BatchProcessor([]), tensor([0.])), ('mode', slice(134, 135, None), BatchProcessor([]), tensor([0.])), ('mode', slice(135, 459, None), BatchProcessor([]), tensor([  7900.,   7800.,   7700.,   7600.,   7500.,   7400.,   7300.,   7200.,
          7100.,   7000.,   6900.,   6800.,   6700.,   6600.,   6500.,   6400.,
          6300.,   6200.,   6100.,   6000.,   5900.,   5800.,   5700.,   5600.,
          5500.,   5400.,   5300.,   5200.,   5100.,   5000.,   4900.,   4800.,
          4700.,   4600.,   4500.,   4400.,   4300.,   4200.,   4100.,   4000.,
          3900.,   3800.,   3700.,   3600.,   3500.,   3400.,   3300.,   3200.,
          3100.,   3000.,   2900.,   2800.,   2700.,   2600.,   2500.,   2400.,
          2300.,   2200.,   2100.,   2000.,   1900.,   1800.,   1700.,   1600.,
          1500.,   1400.,   1300.,   1200.,   1100.,   1000.,    900.,    800.,
           700.,    600.,    500.,    400.,    300.,    200.,    100.,     -0.,
          -100.,   -200.,   -300.,   -400.,   -500.,   -600.,   -700.,   -800.,
          -900.,  -1000.,  -1100.,  -1200.,  -1300.,  -1400.,  -1500.,  -1600.,
         -1700.,  -1800.,  -1900.,  -2000.,  -2100.,  -2200.,  -2300.,  -2400.,
         -2500.,  -2600.,  -2700.,  -2800.,  -2900.,  -3000.,  -3100.,  -3200.,
         -3300.,  -3400.,  -3500.,  -3600.,  -3700.,  -3800.,  -3900.,  -4000.,
         -4100.,  -4200.,  -4300.,  -4400.,  -4500.,  -4600.,  -4700.,  -4800.,
         -4900.,  -5000.,  -5100.,  -5200.,  -5300.,  -5400.,  -5500.,  -5600.,
         -5700.,  -5800.,  -5900.,  -6000.,  -6100.,  -6200.,  -6300.,  -6400.,
         -6500.,  -6600.,  -6700.,  -6800.,  -6900.,  -7000.,  -7100.,  -7200.,
         -7300.,  -7400.,  -7500.,  -7600.,  -7700.,  -7800.,  -7900.,  -8000.,
         -8100.,  -8200.,  -8300.,  -8400.,  -8500.,  -8600.,  -8700.,  -8800.,
         -8900.,  -9000.,  -9100.,  -9200.,  -9300.,  -9400.,  -9500.,  -9600.,
         -9700.,  -9800.,  -9900., -10000., -10100., -10200., -10300., -10400.,
        -10500., -10600., -10700., -10800., -10900., -11000., -11100., -11200.,
        -11300., -11400., -11500., -11600., -11700., -11800., -11900., -12000.,
        -12100., -12200., -12300., -12400., -12500., -12600., -12700., -12800.,
        -12900., -13000., -13100., -13200., -13300., -13400., -13500., -13600.,
        -13700., -13800., -13900., -14000., -14100., -14200., -14300., -14400.,
        -14500., -14600., -14700., -14800., -14900., -15000., -15100., -15200.,
        -15300., -15400., -15500., -15600., -15700., -15800., -15900., -16000.,
        -16100., -16200., -16300., -16400., -16500., -16600., -16700., -16800.,
        -16900., -17000., -17100., -17200., -17300., -17400., -17500., -17600.,
        -17700., -17800., -17900., -18000., -18100., -18200., -18300., -18400.,
        -18500., -18600., -18700., -18800., -18900., -19000., -19100., -19200.,
        -19300., -19400., -19500., -19600., -19700., -19800., -19900., -20000.,
        -20100., -20200., -20300., -20400., -20500., -20600., -20700., -20800.,
        -20900., -21000., -21100., -21200., -21300., -21400., -21500., -21600.,
        -21700., -21800., -21900., -22000., -22100., -22200., -22300., -22400.,
        -22500., -22600., -22700., -22800., -22900., -23000., -23100., -23200.,
        -23300., -23400., -23500., -23600., -23700., -23800., -23900., -24000.,
        -24100., -24200., -24300., -24400.])), ('mode', slice(459, 460, None), BatchProcessor([]), tensor([0.]))]),
    'dt': 900,
    'input_processor': BatchProcessor([('nmlz', slice(0, 1, None), BatchProcessor([]), tensor([0.]), tensor([3.6000e+08])), ('1', slice(1, 4, None), BatchProcessor([])), ('oneh', slice(4, 5, None), BatchProcessor([]), tensor([    0.,   900.,  1800.,  2700.,  3600.,  4500.,  5400.,  6300.,  7200.,
         8100.,  9000.,  9900., 10800., 11700., 12600., 13500., 14400., 15300.,
        16200., 17100., 18000., 18900., 19800., 20700., 21600., 22500., 23400.,
        24300., 25200., 26100., 27000., 27900., 28800., 29700., 30600., 31500.,
        32400., 33300., 34200., 35100., 36000., 36900., 37800., 38700., 39600.,
        40500., 41400., 42300., 43200., 44100., 45000., 45900., 46800., 47700.,
        48600., 49500., 50400., 51300., 52200., 53100., 54000., 54900., 55800.,
        56700., 57600., 58500., 59400., 60300., 61200., 62100., 63000., 63900.,
        64800., 65700., 66600., 67500., 68400., 69300., 70200., 71100., 72000.,
        72900., 73800., 74700., 75600., 76500., 77400., 78300., 79200., 80100.,
        81000., 81900., 82800., 83700., 84600., 85500., 86400.])), ('nmlz', slice(5, 6, None), BatchProcessor([]), tensor([0.]), tensor([84240000.])), ('1', slice(6, 8, None), BatchProcessor([])), ('oneh', slice(8, 9, None), BatchProcessor([]), tensor([0., 1.])), ('oneh', slice(9, 10, None), BatchProcessor([]), tensor([ 900., 1800., 2700., 3600., 4500., 5400., 6300., 7200.])), ('oneh', slice(10, 11, None), BatchProcessor([]), tensor([ 900., 1800., 2700., 3600., 4500., 5400., 6300., 7200.])), ('oneh', slice(11, 12, None), BatchProcessor([]), tensor([ 900., 1800., 2700., 3600., 4500., 5400., 6300., 7200.])), ('oneh', slice(12, 13, None), BatchProcessor([]), tensor([0., 1.])), ('nmlz', slice(13, 15, None), BatchProcessor([]), tensor([40., 20.]), tensor([20.,  1.])), ('nmlz', slice(15, 16, None), BatchProcessor([]), tensor([0.]), tensor([100000.])), ('oneh', slice(16, 17, None), BatchProcessor([]), tensor([-7900., -7800., -7700., -7600., -7500., -7400., -7300., -7200., -7100.,
        -7000., -6900., -6800., -6700., -6600., -6500., -6400., -6300., -6200.,
        -6100., -6000., -5900., -5800., -5700., -5600., -5500., -5400., -5300.,
        -5200., -5100., -5000., -4900., -4800., -4700., -4600., -4500., -4400.,
        -4300., -4200., -4100., -4000., -3900., -3800., -3700., -3600., -3500.,
        -3400., -3300., -3200., -3100., -3000., -2900., -2800., -2700., -2600.,
        -2500., -2400., -2300., -2200., -2100., -2000., -1900., -1800., -1700.,
        -1600., -1500., -1400., -1300., -1200., -1100., -1000.,  -900.,  -800.,
         -700.,  -600.,  -500.,  -400.,  -300.,  -200.,  -100.,     0.,   100.,
          200.,   300.,   400.,   500.,   600.,   700.,   800.,   900.,  1000.,
         1100.,  1200.,  1300.,  1400.,  1500.,  1600.,  1700.,  1800.,  1900.,
         2000.,  2100.,  2200.,  2300.,  2400.,  2500.,  2600.,  2700.,  2800.,
         2900.,  3000.,  3100.,  3200.,  3300.,  3400.,  3500.,  3600.,  3700.,
         3800.,  3900.,  4000.,  4100.,  4200.,  4300.,  4400.,  4500.,  4600.,
         4700.,  4800.,  4900.,  5000.,  5100.,  5200.,  5300.,  5400.,  5500.,
         5600.,  5700.,  5800.,  5900.,  6000.,  6100.,  6200.,  6300.,  6400.,
         6500.,  6600.,  6700.,  6800.,  6900.,  7000.,  7100.,  7200.,  7300.,
         7400.,  7500.,  7600.,  7700.,  7800.,  7900.,  8000.,  8100.,  8200.,
         8300.,  8400.,  8500.,  8600.,  8700.,  8800.,  8900.,  9000.,  9100.,
         9200.,  9300.,  9400.,  9500.,  9600.,  9700.,  9800.,  9900., 10000.,
        10100., 10200., 10300., 10400., 10500., 10600., 10700., 10800., 10900.,
        11000., 11100., 11200., 11300., 11400., 11500., 11600., 11700., 11800.,
        11900., 12000., 12100., 12200., 12300., 12400., 12500., 12600., 12700.,
        12800., 12900., 13000., 13100., 13200., 13300., 13400., 13500., 13600.,
        13700., 13800., 13900., 14000., 14100., 14200., 14300., 14400., 14500.,
        14600., 14700., 14800., 14900., 15000., 15100., 15200., 15300., 15400.,
        15500., 15600., 15700., 15800., 15900., 16000., 16100., 16200., 16300.,
        16400., 16500., 16600., 16700., 16800., 16900., 17000., 17100., 17200.,
        17300., 17400., 17500., 17600., 17700., 17800., 17900., 18000., 18100.,
        18200., 18300., 18400., 18500., 18600., 18700., 18800., 18900., 19000.,
        19100., 19200., 19300., 19400., 19500., 19600., 19700., 19800., 19900.,
        20000., 20100., 20200., 20300., 20400., 20500., 20600., 20700., 20800.,
        20900., 21000., 21100., 21200., 21300., 21400., 21500., 21600., 21700.,
        21800., 21900., 22000., 22100., 22200., 22300., 22400., 22500., 22600.,
        22700., 22800., 22900., 23000., 23100., 23200., 23300., 23400., 23500.,
        23600., 23700., 23800., 23900., 24000., 24100., 24200., 24300., 24400.]))]),
    'model': HoLL(EVSE(state=[2.520000e+08 6.716067e-01 9.028649e-01 6.461768e-01 1.800000e+03], charging_efficiency=252000000.0, correct_infeasible=1, constraint_fuzziness=True),BESS(state=[62078608.        0.        1.], capacity=84240000.0, charging_efficiency=0.78, discharging_efficiency=1, relative_loss=0.0, correct_infeasible=True),CHPP(state=[   0 4500 6300 1800], state_matrix=[[(0.0, 0), (-2800.0, -6250.0)], [(-2800.0, -6250.0), (-5500.0, -12500)]], correct_infeasible=True),HWT_GCB(state=[ 0.       76.550053 20.      ], soft_mix_temp=40, soft_max_temp=60, volume=3.3, charging_efficiency=1, discharging_efficiency=1, relative_loss=0.005655, state_matrix=[[(0, 0), (0, -38500)], [(0, -4000), (0, -60000)]], max_temp=90),demand(state=[14617.], hidden_state=[263 660 array([], shape=(0, 1), dtype=float64)])),
    'output_action_feasibility': False,
    'output_interaction': True,
    'output_new_state': True,
    'output_processor': BatchProcessor([('nmlz', slice(0, 1, None), BatchProcessor([]), tensor([0.]), tensor([3.6000e+08])), ('1', slice(1, 4, None), BatchProcessor([])), ('didx', slice(4, 5, None), BatchProcessor([]), tensor([    0.,   900.,  1800.,  2700.,  3600.,  4500.,  5400.,  6300.,  7200.,
         8100.,  9000.,  9900., 10800., 11700., 12600., 13500., 14400., 15300.,
        16200., 17100., 18000., 18900., 19800., 20700., 21600., 22500., 23400.,
        24300., 25200., 26100., 27000., 27900., 28800., 29700., 30600., 31500.,
        32400., 33300., 34200., 35100., 36000., 36900., 37800., 38700., 39600.,
        40500., 41400., 42300., 43200., 44100., 45000., 45900., 46800., 47700.,
        48600., 49500., 50400., 51300., 52200., 53100., 54000., 54900., 55800.,
        56700., 57600., 58500., 59400., 60300., 61200., 62100., 63000., 63900.,
        64800., 65700., 66600., 67500., 68400., 69300., 70200., 71100., 72000.,
        72900., 73800., 74700., 75600., 76500., 77400., 78300., 79200., 80100.,
        81000., 81900., 82800., 83700., 84600., 85500., 86400.])), ('nmlz', slice(5, 6, None), BatchProcessor([]), tensor([0.]), tensor([84240000.])), ('1', slice(6, 8, None), BatchProcessor([])), ('didx', slice(8, 9, None), BatchProcessor([]), tensor([0., 1.])), ('didx', slice(9, 10, None), BatchProcessor([]), tensor([ 900., 1800., 2700., 3600., 4500., 5400., 6300., 7200.])), ('didx', slice(10, 11, None), BatchProcessor([]), tensor([ 900., 1800., 2700., 3600., 4500., 5400., 6300., 7200.])), ('didx', slice(11, 12, None), BatchProcessor([]), tensor([ 900., 1800., 2700., 3600., 4500., 5400., 6300., 7200.])), ('didx', slice(12, 13, None), BatchProcessor([]), tensor([0., 1.])), ('nmlz', slice(13, 14, None), BatchProcessor([]), tensor([40.]), tensor([20.])), ('didx', slice(14, 15, None), BatchProcessor([]), tensor([0.])), ('didx', slice(15, 16, None), BatchProcessor([]), tensor([0.])), ('didx', slice(16, 17, None), BatchProcessor([]), tensor([  7900.,   7800.,   7700.,   7600.,   7500.,   7400.,   7300.,   7200.,
          7100.,   7000.,   6900.,   6800.,   6700.,   6600.,   6500.,   6400.,
          6300.,   6200.,   6100.,   6000.,   5900.,   5800.,   5700.,   5600.,
          5500.,   5400.,   5300.,   5200.,   5100.,   5000.,   4900.,   4800.,
          4700.,   4600.,   4500.,   4400.,   4300.,   4200.,   4100.,   4000.,
          3900.,   3800.,   3700.,   3600.,   3500.,   3400.,   3300.,   3200.,
          3100.,   3000.,   2900.,   2800.,   2700.,   2600.,   2500.,   2400.,
          2300.,   2200.,   2100.,   2000.,   1900.,   1800.,   1700.,   1600.,
          1500.,   1400.,   1300.,   1200.,   1100.,   1000.,    900.,    800.,
           700.,    600.,    500.,    400.,    300.,    200.,    100.,     -0.,
          -100.,   -200.,   -300.,   -400.,   -500.,   -600.,   -700.,   -800.,
          -900.,  -1000.,  -1100.,  -1200.,  -1300.,  -1400.,  -1500.,  -1600.,
         -1700.,  -1800.,  -1900.,  -2000.,  -2100.,  -2200.,  -2300.,  -2400.,
         -2500.,  -2600.,  -2700.,  -2800.,  -2900.,  -3000.,  -3100.,  -3200.,
         -3300.,  -3400.,  -3500.,  -3600.,  -3700.,  -3800.,  -3900.,  -4000.,
         -4100.,  -4200.,  -4300.,  -4400.,  -4500.,  -4600.,  -4700.,  -4800.,
         -4900.,  -5000.,  -5100.,  -5200.,  -5300.,  -5400.,  -5500.,  -5600.,
         -5700.,  -5800.,  -5900.,  -6000.,  -6100.,  -6200.,  -6300.,  -6400.,
         -6500.,  -6600.,  -6700.,  -6800.,  -6900.,  -7000.,  -7100.,  -7200.,
         -7300.,  -7400.,  -7500.,  -7600.,  -7700.,  -7800.,  -7900.,  -8000.,
         -8100.,  -8200.,  -8300.,  -8400.,  -8500.,  -8600.,  -8700.,  -8800.,
         -8900.,  -9000.,  -9100.,  -9200.,  -9300.,  -9400.,  -9500.,  -9600.,
         -9700.,  -9800.,  -9900., -10000., -10100., -10200., -10300., -10400.,
        -10500., -10600., -10700., -10800., -10900., -11000., -11100., -11200.,
        -11300., -11400., -11500., -11600., -11700., -11800., -11900., -12000.,
        -12100., -12200., -12300., -12400., -12500., -12600., -12700., -12800.,
        -12900., -13000., -13100., -13200., -13300., -13400., -13500., -13600.,
        -13700., -13800., -13900., -14000., -14100., -14200., -14300., -14400.,
        -14500., -14600., -14700., -14800., -14900., -15000., -15100., -15200.,
        -15300., -15400., -15500., -15600., -15700., -15800., -15900., -16000.,
        -16100., -16200., -16300., -16400., -16500., -16600., -16700., -16800.,
        -16900., -17000., -17100., -17200., -17300., -17400., -17500., -17600.,
        -17700., -17800., -17900., -18000., -18100., -18200., -18300., -18400.,
        -18500., -18600., -18700., -18800., -18900., -19000., -19100., -19200.,
        -19300., -19400., -19500., -19600., -19700., -19800., -19900., -20000.,
        -20100., -20200., -20300., -20400., -20500., -20600., -20700., -20800.,
        -20900., -21000., -21100., -21200., -21300., -21400., -21500., -21600.,
        -21700., -21800., -21900., -22000., -22100., -22200., -22300., -22400.,
        -22500., -22600., -22700., -22800., -22900., -23000., -23100., -23200.,
        -23300., -23400., -23500., -23600., -23700., -23800., -23900., -24000.,
        -24100., -24200., -24300., -24400.])), ('didx', slice(17, 18, None), BatchProcessor([]), tensor([0.]))]),
    'sampling_parameters': {   'dwell_times': [   900,
                                                  1800,
                                                  2700,
                                                  3600,
                                                  4500,
                                                  5400,
                                                  6300,
                                                  7200],
                               'infeasible_chance': 0.5,
                               'min_off_times': [   900,
                                                    1800,
                                                    2700,
                                                    3600,
                                                    4500,
                                                    5400,
                                                    6300,
                                                    7200],
                               'min_on_times': [   900,
                                                   1800,
                                                   2700,
                                                   3600,
                                                   4500,
                                                   5400,
                                                   6300,
                                                   7200],
                               'soc_distribution': (   [   (0, 0.25),
                                                           (0.25, 0.75),
                                                           (0.75, 1)],
                                                       [0.375, 0.25, 0.375]),
                               'temp_distribution': (   [   (20, 40),
                                                            (40, 60),
                                                            (60, 90)],
                                                        [0.15, 0.7, 0.15])}}
---
parameters:
{   'batch_count': 1000.0,
    'batch_norms': array([0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]),
    'batch_size': 3072,
    'betas': array([0.5, 2. , 0.5, 1. , 0.5, 0.5, 2. , 0.5, 0.5, 0.5, 1. , 1. ]),
    'dropout': array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
    'early_stopping_callback': EarlyStoppingCallback(stopping_scores={}, improvement_window=100),
    'epoch_count': 1000,
    'hidden_layer_count': 9,
    'input_width': 459,
    'learning_rate': 0.0005,
    'loss': MixedLoss([(MSELoss(), 1), (MSELoss(), 2), (MSELoss(), 1), (CrossEntropyLoss(), 97), (MSELoss(), 1), (MSELoss(), 2), (CrossEntropyLoss(), 2), (CrossEntropyLoss(), 8), (CrossEntropyLoss(), 8), (CrossEntropyLoss(), 8), (CrossEntropyLoss(), 2), (MSELoss(), 1), (CrossEntropyLoss(), 1), (CrossEntropyLoss(), 1), (CrossEntropyLoss(), 324), (CrossEntropyLoss(), 1)],tensor([1.0000e+01, 1.0000e+01, 1.0000e+06, 1.0000e+01, 1.0000e+06, 1.0000e+01,
        1.0000e+03, 1.0000e+03, 1.0000e+01, 1.0000e+01, 1.0000e+03, 1.0000e+05,
        1.0000e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00], device='cuda:0'),cuda),
    'lr_scheduler': array([<class 'torch.optim.lr_scheduler.StepLR'>, {'step_size': 25, 'gamma': 0.75}], dtype=object),
    'max_grad_norm': 1000000.0,
    'output_activation': None,
    'output_width': 460,
    'regularization': L1RegularizationLoss(device=cuda, scale=2.000000E-06),
    'skips': array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
       [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
       [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]),
    'width': 512,
    'width_interpolation_steps_input': 2,
    'width_interpolation_steps_output': 5}
---
neural network:
Sequential(
  (0_skip_to_8(459)): SkipConnection()
  (0_skip_to_9(459)): SkipConnection()
  (0_linear(459,477)): Linear(in_features=459, out_features=477, bias=True)
  (0_swish(1'00)): Swish(
    (sigmoid): Sigmoid()
  )
  (1_skip_to_8(477)): SkipConnection()
  (1_skip_to_9(477)): SkipConnection()
  (1_linear(477,495)): Linear(in_features=477, out_features=495, bias=True)
  (1_swish(0'50)): Swish(
    (sigmoid): Sigmoid()
  )
  (2_skip_to_5(495)): SkipConnection()
  (2_skip_to_7(495)): SkipConnection()
  (2_batch_norm(495)): BatchNorm1d(495, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2_linear(495,512)): Linear(in_features=495, out_features=512, bias=True)
  (2_swish(0'50)): Swish(
    (sigmoid): Sigmoid()
  )
  (3_skip_to_8(512)): SkipConnection()
  (3_batch_norm(512)): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (3_linear(512,512)): Linear(in_features=512, out_features=512, bias=True)
  (3_swish(2'00)): Swish(
    (sigmoid): Sigmoid()
  )
  (4_linear(512,504)): Linear(in_features=512, out_features=504, bias=True)
  (4_swish(0'50)): Swish(
    (sigmoid): Sigmoid()
  )
  (5_skip_from_2(495)): SkipConnection()
  (5_linear(999,495)): Linear(in_features=999, out_features=495, bias=True)
  (5_swish(0'50)): Swish(
    (sigmoid): Sigmoid()
  )
  (6_linear(495,486)): Linear(in_features=495, out_features=486, bias=True)
  (6_swish(0'50)): Swish(
    (sigmoid): Sigmoid()
  )
  (7_skip_from_2(495)): SkipConnection()
  (7_linear(981,478)): Linear(in_features=981, out_features=478, bias=True)
  (7_swish(1'00)): Swish(
    (sigmoid): Sigmoid()
  )
  (8_skip_from_0(459)): SkipConnection()
  (8_skip_from_1(477)): SkipConnection()
  (8_skip_from_3(512)): SkipConnection()
  (8_linear(1926,469)): Linear(in_features=1926, out_features=469, bias=True)
  (8_swish(1'00)): Swish(
    (sigmoid): Sigmoid()
  )
  (9_skip_from_0(459)): SkipConnection()
  (9_skip_from_1(477)): SkipConnection()
  (9_linear(1405,460)): Linear(in_features=1405, out_features=460, bias=True)
)
---
parameter count:
3989188
---
